generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  username         String         @unique
  email            String?         @unique
  password         String
  sentMessages     Message[]      @relation("SentMessages")
  conversations    Conversation[] @relation("ConversationsUsers")
  adminConversations Conversation[] @relation("ConversationsAdminUsers")
  notificationsActors Notification[] @relation("NotificationActorUser")
  readMessages Message[] @relation("MessageReadUser")
  invitedConversations Conversation[] @relation("UserInvitation")
  notifications    Notification[]
  posts            Post[]         @relation("UserPostRelation")
  following        follows[]      @relation("followerUserRelation")
  followers        follows[]      @relation("followingUserRelation")
  likedPosts       Post[] @relation("UserLikePostRelation")
}

model follows {
  id          String @id @default(cuid())
  followingId String
  followerId  String
  follower    User   @relation("followerUserRelation", fields: [followerId], references: [id])
  following   User   @relation("followingUserRelation", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Post {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  editedAt  DateTime?
  parentId  String?
  authorId    String
  notificationsRelated Notification[] @relation("NotificationRelatedPost") 
  parent    Post?     @relation("ParentPostRelation", fields: [parentId], references: [id])
  childrens Post[]    @relation("ParentPostRelation")
  author      User      @relation("UserPostRelation", fields: [authorId], references: [id])
  likes     User[] @relation("UserLikePostRelation")
}

model Conversation {
  id String @id @default(cuid())
  title String
  description String?
  notificationsRelated Notification[] @relation("NotificationRelatedConv")
  invitedUsers User[] @relation("UserInvitation")
  messages Message[] @relation("conversationMessages")
  users User[] @relation("ConversationsUsers")
  admins User[] @relation("ConversationsAdminUsers")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  authorId   String
  reads       User[] @relation("MessageReadUser")
  conversationId String
  conversation Conversation @relation("conversationMessages",fields: [conversationId],references: [id])
  author     User     @relation("SentMessages", fields: [authorId], references: [id])
}

model Notification {
  id             String   @id @default(cuid())
  type           NotificationType
  content        String?  // Optional for dynamic text
  createdAt      DateTime @default(now())
  userId         String   // Target user receiving the notification
  user           User     @relation(fields: [userId], references: [id])
  actorId        String?  // Optional: User who performed the action
  actor          User?    @relation("NotificationActorUser", fields: [actorId], references: [id])
  relatedPostId  String?  // Optional: Reference to a related post
  relatedPost    Post?    @relation("NotificationRelatedPost",fields: [relatedPostId], references: [id])
  relatedConvId  String?  // Optional: Reference to a related conversation
  relatedConv    Conversation? @relation("NotificationRelatedConv",fields: [relatedConvId], references: [id])
  read           Boolean  @default(false)

  @@index([type, createdAt]) // Useful for filtering by type or time
}
enum NotificationType {
  FOLLOWED_USER
  GROUP_INVITATION
  POST_LIKED
  COMMENT_REPLIED
  NEW_MESSAGE
  MENTION
}